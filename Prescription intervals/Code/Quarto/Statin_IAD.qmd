---
title: "Statin IAD for Practice 37"
format: html
editor: visual
---

# **Summary Analysis of the Inter-arrival Density (time between two consecutive prescriptions for a chosen drug to be issued) for Statin prescriptions in GP practice number 37**

```{r, include=FALSE}
##---##Getting Started##-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
library(tidyverse)
library(dplyr)     
library(lubridate)  
library(ggplot2)

##---##Isolating Data---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

statins <- read.csv("/Users/padraicdonoghue/Desktop/GitHub/DIAMOND/Prescription intervals/Code/merged_output.csv")

##---##Formatting Date and Adding Month/Year Covariates-------------------------------------------------------------------------------

statins <- statins %>% 
  filter(str_detect(atc_final, "C10AA")) %>% 
  mutate(
    script_date = as.Date(as.character(script_date), format = "%d%b%Y"),
    prescription_month = month(script_date, label = TRUE, abbr = FALSE),  # Full month name
    prescription_year = year(script_date))

statins <- statins %>%
  arrange(UniquePatientID, script_date) %>%  # Critical for correct ordering
  group_by(UniquePatientID) %>%             # Essential for patient-specific gaps
  mutate(
    gap_days = as.numeric(difftime(lead(script_date), script_date, units = "days")),
    gap_days = abs(gap_days)  # Ensures positive values
  ) %>%
  ungroup()

##---Group for number of issues = 1 (30 days)---------------------------------------------
onemonth <- statins %>% 
  filter(numberofissues==1)

graphone <- ggplot(onemonth, aes(x = gap_days, y = ..density..)) +
  geom_histogram(binwidth = 5, fill = "steelblue", colour = "black") +
  labs(
    title = "Density of Gaps Between 30 Day Statin Prescriptions Over A 1 Year Period",
    x = "Days Since Last Statin Prescription",
    y = "Density"
  ) +
  scale_x_continuous(breaks = seq(0, 365, by = 30)) +
  coord_cartesian(xlim = c(0, 365)) +
  theme_minimal()
plot(graphone)

##---Group for number of issues = 3 (90 days)---------------------------------------------

threemonth <- statins %>% 
  filter(numberofissues==3)

graphtwo<- ggplot(threemonth, aes(x = gap_days, y = ..density..)) +
  geom_histogram(binwidth = 5, fill = "steelblue", colour = "black") +
  labs(
    title = "Density of Gaps Between 90 Day Statin Prescriptions Over A 1 Year Period",
    x = "Days Since Last Statin Prescription",
    y = "Density"
  ) +
  scale_x_continuous(breaks = seq(0, 365, by = 30)) +
  coord_cartesian(xlim = c(0, 365)) +
  theme_minimal()
plot(graphtwo)

##---Plotting------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

graphthree <- ggplot(statins, aes(x = gap_days, y = ..density..)) +
  geom_histogram(binwidth = 5, fill = "steelblue", colour = "black") +
  labs(
    title = "Density of Gaps Between Statin Prescriptions Over A 1 Year Period",
    x = "Days Since Last Statin Prescription",
    y = "Density"
  ) +
  scale_x_continuous(breaks = seq(0, 365, by = 30)) +
  coord_cartesian(xlim = c(0, 365)) +
  theme_minimal()
plot(graphthree)

##---Generating Simple Stats on the Histogram----------------------------------------------------------------------------------------------------------------------------------------------------------

summary(statins)

##---Generating Individual statin histograms-----------------------------------------------------------------------------------------------------------------------------------------------------------

multigraph<- ggplot(statins, aes(x = gap_days, y = ..density..)) +
  geom_histogram(binwidth = 5, fill = "steelblue", colour = "black", alpha = 0.6) +
  labs(
    title = "Density of Gaps Between Statin Prescriptions (by ATC Code)",
    x = "Days Since Last Statin Prescription",
    y = "Density"
  ) +
  scale_x_continuous(breaks = seq(0, 365, by = 30)) +
  coord_cartesian(xlim = c(0, 365)) +
  # facet_wrap(~ genericname) +  # Facet by statin ATC code/generic name
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

plot(multigraph)

```

# Statins

## This analysis is categorized to analyse differences in prescribing patterns and intervals across various healthcare scheme entitlements, genders and age brackets.

```{r}
library(knitr)
##---Statin Summary By ATC-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
statin_summary_by_atc <- statins %>%
  # group_by(atc_final, genericname) %>%
  summarise(
    count = sum(!is.na(gap_days)),
    mean_IAD = mean(gap_days, na.rm = TRUE),
    median_IAD = median(gap_days, na.rm = TRUE),
    sd_IAD = sd(gap_days, na.rm = TRUE),
    iqr_IAD = IQR(gap_days, na.rm = TRUE),
    min_IAD = min(gap_days, na.rm = TRUE),
    max_IAD = max(gap_days, na.rm = TRUE)
  )
kable(statin_summary_by_atc, caption = "Summary of Statin Statistics by ATC")

##---Working with merged Data--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Create age brackets
statins <- statins %>%
  mutate(age_bracket = case_when(
    age >= 60 & age <= 64 ~ "60–64",
    age >= 65 & age <= 69 ~ "65–69",
    age >= 70 & age <= 74 ~ "70–74",
    age >= 75 & age <= 79 ~ "75–79",
    age >= 80 & age <= 84 ~ "80–84",
    age >= 85 & age <= 90 ~ "85–90",
    age > 90 ~ "90+",
    TRUE ~ NA_character_
  ))

# Step 6: Group by sex,  scheme, age bracket
statin_summary <- statins %>%
  group_by(scheme, sex, age_bracket) %>%
  summarise(
    count = sum(!is.na(gap_days)),
    mean_IAD = ifelse(count == 0, NA, mean(gap_days, na.rm = TRUE)),
    median_IAD = ifelse(count == 0, NA, median(gap_days, na.rm = TRUE)),
    sd_IAD = ifelse(count < 2, NA, sd(gap_days, na.rm = TRUE)), # SD needs ≥2 obs
    iqr_IAD = ifelse(count == 0, NA, IQR(gap_days, na.rm = TRUE)),
    min_IAD = ifelse(count == 0, NA, min(gap_days, na.rm = TRUE)),
    max_IAD = ifelse(count == 0, NA, max(gap_days, na.rm = TRUE)),
    .groups = "drop"
  )
kable(statin_summary, caption = "Statin Summary")

# Step 6: Group by scheme
statin_summary_scheme <- statins %>%
  group_by(scheme) %>%
  summarise(
    count = sum(!is.na(gap_days)),
    mean_IAD = ifelse(count == 0, NA, mean(gap_days, na.rm = TRUE)),
    median_IAD = ifelse(count == 0, NA, median(gap_days, na.rm = TRUE)),
    sd_IAD = ifelse(count < 2, NA, sd(gap_days, na.rm = TRUE)), # SD needs ≥2 obs
    iqr_IAD = ifelse(count == 0, NA, IQR(gap_days, na.rm = TRUE)),
    min_IAD = ifelse(count == 0, NA, min(gap_days, na.rm = TRUE)),
    max_IAD = ifelse(count == 0, NA, max(gap_days, na.rm = TRUE)),
    .groups = "drop"
  )
kable(statin_summary_scheme, caption = "Summary of Statin Statistics by Scheme")

# Step 6: Group by sex
statin_summary_sex <- statins %>%
  group_by(sex) %>%
  summarise(
    count = sum(!is.na(gap_days)),
    mean_IAD = ifelse(count == 0, NA, mean(gap_days, na.rm = TRUE)),
    median_IAD = ifelse(count == 0, NA, median(gap_days, na.rm = TRUE)),
    sd_IAD = ifelse(count < 2, NA, sd(gap_days, na.rm = TRUE)), # SD needs ≥2 obs
    iqr_IAD = ifelse(count == 0, NA, IQR(gap_days, na.rm = TRUE)),
    min_IAD = ifelse(count == 0, NA, min(gap_days, na.rm = TRUE)),
    max_IAD = ifelse(count == 0, NA, max(gap_days, na.rm = TRUE)),
    .groups = "drop"
  )
kable(statin_summary_sex, caption = "Summary of Statin Statistics by Sex")

# Step 6: Group by age bracket 
statin_summary_age_bracket <- statins %>%
  group_by(age_bracket) %>%
  summarise(
    count = sum(!is.na(gap_days)),
    mean_IAD = ifelse(count == 0, NA, mean(gap_days, na.rm = TRUE)),
    median_IAD = ifelse(count == 0, NA, median(gap_days, na.rm = TRUE)),
    sd_IAD = ifelse(count < 2, NA, sd(gap_days, na.rm = TRUE)), # SD needs ≥2 obs
    iqr_IAD = ifelse(count == 0, NA, IQR(gap_days, na.rm = TRUE)),
    min_IAD = ifelse(count == 0, NA, min(gap_days, na.rm = TRUE)),
    max_IAD = ifelse(count == 0, NA, max(gap_days, na.rm = TRUE)),
    .groups = "drop"
  )
kable(statin_summary_age_bracket, caption = "Summary of Statin Statistics by Age Bracket")

#group by year
statin_year <- statins %>%
  group_by(prescription_year) %>%
  summarise(
    count = sum(!is.na(gap_days)),
    mean_IAD = ifelse(count == 0, NA, mean(gap_days, na.rm = TRUE)),
    median_IAD = ifelse(count == 0, NA, median(gap_days, na.rm = TRUE)),
    sd_IAD = ifelse(count < 2, NA, sd(gap_days, na.rm = TRUE)), # SD needs ≥2 obs
    iqr_IAD = ifelse(count == 0, NA, IQR(gap_days, na.rm = TRUE)),
    min_IAD = ifelse(count == 0, NA, min(gap_days, na.rm = TRUE)),
    max_IAD = ifelse(count == 0, NA, max(gap_days, na.rm = TRUE)),
    .groups = "drop"
  )
kable(statin_year, caption = "Summary of Statin Statistics by Year")

#group by month
statin_month <- statins %>%
  group_by(prescription_month) %>%
  summarise(
    count = sum(!is.na(gap_days)),
    mean_IAD = ifelse(count == 0, NA, mean(gap_days, na.rm = TRUE)),
    median_IAD = ifelse(count == 0, NA, median(gap_days, na.rm = TRUE)),
    sd_IAD = ifelse(count < 2, NA, sd(gap_days, na.rm = TRUE)), # SD needs ≥2 obs
    iqr_IAD = ifelse(count == 0, NA, IQR(gap_days, na.rm = TRUE)),
    min_IAD = ifelse(count == 0, NA, min(gap_days, na.rm = TRUE)),
    max_IAD = ifelse(count == 0, NA, max(gap_days, na.rm = TRUE)),
    .groups = "drop"
  )

kable(statin_month, caption = "Summary of Statin Statistics by Month")
```

## Boxplot displaying the variation in results grouped by healthcare scheme and its associated standard deviation.

```{r}
#| fig.width: 10
#| fig.height: 6
ggplot(statins %>% filter(!is.na(gap_days)), 
                  aes(x = age_bracket, y = gap_days, 
                      fill = factor(sex),    # Fill color by sex
                      color = factor(sex))) + # Border color by sex
  geom_boxplot(alpha = 0.7) +  # alpha controls transparency
  facet_wrap(~ scheme) +
  scale_y_continuous(breaks = seq(0, max(statins$gap_days, na.rm = TRUE), by = 60)) +
  labs(
    title = "Distribution of Gap Days Between Statin Prescriptions",
    x = "Age Bracket",
    y = "Days Between Prescriptions",
    fill = "Sex",  # Legend title for fill
    color = "Sex"  # Legend title for border color
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

Scatter plot of gap time Vs prescription month

```{r}
statins <- statins %>%
  mutate(prescription_month = factor(prescription_month, 
                                     levels = month.name,
                                     ordered = TRUE))

ggplot(statins %>% filter(!is.na(gap_days)), 
                        aes(x = prescription_month, y = gap_days)) +
  geom_jitter(width = 0.2, height = 0, alpha = 0.4, color = "steelblue") +  # Adds slight horizontal spread
  scale_y_continuous(breaks = seq(0, max(statins$gap_days, na.rm = TRUE), by = 60)) +
  scale_y_continuous(
    limits = c(0, 365),
    breaks = seq(0, 360, by = 30),
    expand = c(0, 0))+            
  labs(title = "Prescription Gap Days by Month",
       subtitle = "Each point represents one prescription interval",
       x = "Month of Prescription",
       y = "Days Until Next Prescription") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Boxplot of gap time Vs prescription month

```{r}
ggplot(statins %>% filter(!is.na(gap_days)), 
                        aes(x = prescription_month, y = gap_days)) +
  geom_boxplot(aes(fill = prescription_month), 
               alpha = 0.7,
               outlier.shape = NA) +
  geom_jitter(width = 0.15, 
              height = 0, 
              alpha = 0.3, 
              size = 1,
              color = "steelblue") + 
  stat_summary(fun = mean, 
               geom = "point", 
               shape = 18, 
               size = 3, 
               color = "red") + 
  scale_fill_viridis_d(option = "plasma", 
                       guide = "none") + 
  scale_y_continuous(limits = c(0, 365),
                     breaks = seq(0, 365, by = 30)) +  
  labs(title = "Distribution of Days Between Statin Prescriptions by Month",
       subtitle = "Red diamonds show monthly averages | Boxes show median and IQR",
       x = "Month",
       y = "Days Until Next Prescription",
       caption = "Note: Gaps calculated as time between consecutive prescriptions for each patient") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        plot.title = element_text(face = "bold"),
        plot.subtitle = element_text(color = "gray40"))
```

Boxplot of gap time Vs patient sex

```{r}
statins <- statins %>%
  mutate(sex_label = case_when(
    sex == 1 ~ "Male",
    sex == 2 ~ "Female",
    TRUE ~ "Unknown"
  ))

ggplot(statins %>% filter(!is.na(gap_days)), 
                      aes(x = sex_label, y = gap_days)) +
  geom_boxplot(aes(fill = sex_label), 
               alpha = 0.7,
               outlier.shape = NA) +
  geom_jitter(width = 0.15, 
              height = 0, 
              alpha = 0.3, 
              size = 1,
              color = "steelblue") +
  stat_summary(fun = mean, 
               geom = "point", 
               shape = 18, 
               size = 3, 
               color = "red") +
  scale_fill_manual(values = c("Male" = "#1f77b4", "Female" = "#ff7f0e")) +
  scale_y_continuous(limits = c(0, 365),
                     breaks = seq(0, 365, by = 30)) +
  labs(title = "Statin Prescription Intervals by Sex",
       subtitle = "Red diamonds show group averages | Boxes show median and IQR",
       x = "Sex",
       y = "Days Until Next Prescription",
       caption = paste("Total prescriptions:",
                       nrow(statins %>% filter(!is.na(gap_days))),
                       "| Male:",
                       sum(statins$sex == 1, na.rm = TRUE),
                       "| Female:",
                       sum(statins$sex == 2, na.rm = TRUE))) +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(face = "bold"))
```

Boxplot of gap time Vs patient scheme

```{r}
ggplot(statins %>% filter(!is.na(gap_days)), 
                         aes(x = scheme, y = gap_days)) +
  geom_boxplot(aes(fill = scheme), 
               alpha = 0.7,
               outlier.shape = NA) +
  geom_jitter(width = 0.2, 
              alpha = 0.3, 
              size = 1.5,
              color = "steelblue") +
  stat_summary(fun = mean, 
               geom = "point", 
               shape = 18, 
               size = 3, 
               color = "red") +
  scale_fill_brewer(palette = "Pastel1") +
  scale_y_continuous(limits = c(0, 365),
                     breaks = seq(0, 365, by = 30)) +
  labs(title = "Statin Prescription Intervals by Insurance Scheme",
       subtitle = "Red diamonds show group averages | Points represent individual prescriptions",
       x = "Healthcare Scheme",
       y = "Days Until Next Prescription") +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(face = "bold", size = 14),
        axis.text = element_text(size = 12))
```

Boxplot of gap time Vs patient age

```{r}
ggplot(statins %>% filter(!is.na(gap_days)), 
                      aes(x = age_bracket, y = gap_days)) +
  geom_boxplot(aes(fill = age_bracket), 
               alpha = 0.7,
               outlier.shape = NA) +
  geom_jitter(width = 0.2, 
              alpha = 0.3, 
              size = 1.5,
              color = "steelblue") +
  stat_summary(fun = mean, 
               geom = "point", 
               shape = 18, 
               size = 3, 
               color = "red") +
  scale_fill_viridis_d(option = "magma", 
                       begin = 0.2, 
                       end = 0.8) +  # Age-appropriate color gradient
  scale_y_continuous(limits = c(0, 365),
                     breaks = seq(0, 365, by = 30)) +
  labs(title = "Statin Prescription Intervals by Age Group",
       subtitle = "Red diamonds show group averages | Points represent individual prescriptions",
       x = "Age Bracket",
       y = "Days Until Next Prescription") +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(face = "bold", size = 14),
        axis.text.x = element_text(angle = 45, hjust = 1, size = 12))
```

Linear regression plot of gap days & year

```{r}
ggplot(statins %>% filter(!is.na(gap_days)))+
aes(x = script_date, y = gap_days)+
  
  # Add points with transparency
  geom_point(alpha = 0.5, color = "steelblue") +
  
  # Add regression trend line
  geom_smooth(method = "lm", color = "red", se = TRUE, fill = "pink") +
  
  # Format dates on x-axis
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  
  # Set y-axis limits
  scale_y_continuous(limits = c(0, 365), breaks = seq(0, 365, 60)) +
  
  # Labels and title
  labs(title = "Prescription Gap Days Over Time",
       subtitle = "Each point represents one prescription interval",
       x = "Prescription Date",
       y = "Days Until Next Prescription") +
  
  theme_minimal() +
  theme(plot.title = element_text(face = "bold"))

##--- Generating Factors
# Convert relevant columns to factors
statins <- statins %>%
  mutate(
    prescription_month = factor(prescription_month),
    sex_label = factor(sex_label),  
    scheme = factor(scheme)
  )
```

Linear regression plot of gap days & month

```{r}
ggplot(statins %>% filter(!is.na(gap_days)), 
       aes(x = prescription_month, y = gap_days)) +
  
  # Add jittered points (optional)
  geom_jitter(alpha = 0.3, color = "steelblue", width = 0.2) +
  
  # Add linear regression trend line (group=1 for one line across all months)
  geom_smooth(
    method = "lm",
    aes(group = 1),  # Ensures a single trend line
    color = "red",
    se = TRUE,       # Shows confidence interval
    fill = "lightpink"
  ) +
  
  # Force y-axis limits (0 to 365)
  scale_y_continuous(limits = c(0, 365), breaks = seq(0, 365, by = 60)) +
  
  # Labels and theme
  labs(
    title = "Linear Regression: Gap Days by Month (Max 365 Days)",
    x = "Prescription Month",
    y = "Days Until Next Prescription",
    caption = "Red line = Linear trend | Shaded area = 95% CI"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1), 
    plot.title = element_text(face = "bold")
  )
```

Linear regression plot of gap days & scheme

```{r}
#| fig.width: 15
#| fig.height: 12
ggplot(statins %>% filter(!is.na(gap_days)), 
       aes(x = prescription_month, y = gap_days)) +
  geom_jitter(aes(color = scheme), alpha = 0.4, width = 0.2) +
  geom_smooth(
    method = "lm",
    aes(group = scheme, color = scheme), 
    se = TRUE,     
    linewidth = 1
  ) +
  coord_cartesian(ylim = c(0, 365)) + 
   facet_wrap(~ scheme, ncol = 1) +  
  scale_color_manual(values = c("GMS" = "blue", "DVC" = "green", "Private" = "purple")) +
  scale_y_continuous(
    limits = c(0, 365),
    breaks = seq(0, 360, by = 60),
    expand = c(0, 0)               
  ) +
  labs(
    title = "Prescription Gap Days by Scheme (Max 365 Days)",
    subtitle = "Separate linear regression per scheme",
    x = "Prescription Month",
    y = "Days Until Next Prescription",
    color = "Scheme"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(face = "bold"),
    legend.position = "none"
  )
```
